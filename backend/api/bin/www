#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rethink-db:server');
var http = require('http');

var r = require('rethinkdb');
var async = require('async');
var config = require('../core/db/config');

var createConnPromise = require('../core/db/connection').createConnPromise;




/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

function startExpress() {
  startRealtime(server)
  server.listen(port, '0.0.0.0');
  server.on('error', onError);
  server.on('listening', onListening);
}

function startRealtime(server) {
  // Realtime libs.
  var io = require('socket.io')(server);

  io.use((socket, next) => {
    let auth = {
      ...socket.handshake.query
    };

    createConnPromise()
    .then(conn => {
      r.table('users')
      .get(auth.id)
      .run(conn, (err, res) => {
        if(err) return next(new Error('Database error in authenticating user'));

        if(res.clientPassword === auth.clientPassword) {
          socket.request.user = res;
          next(null);
        } else {
          next(new Error('User is not authenticated'));
        }
      })
    })
  })

  io.on('connection', function(socket) {
    // createConnPromise()
    // .then(conn => {
    //   r.table('users')
    //   .update({
    //     id: socket.request.user.id,
    //     online: true
    //   })
    // })

    // io.emit('online', { id: socket.request.user });
    socket.on('disconnect', function() {
      // io.emit('not hacking', { id: socket.request.id, username: socket.request.username });
      // io.emit('offline', { id: socket.request.user });
    })

    // r.table('activity')
    // .changes().run(socket.request._rdbConn, function(err, cursor) {
    //   cursor.each(change => {
    //     if(change.new_val) {
    //       io.emit('activity', change.new_val);
    //     }
    //   });
    // })

    // socket.on('get current activity', () => {
    //   // r.table('activity') 
    //   // .orderBy({index: 'time'})
    //   // .filter
    // })

  //   socket.on('hacking', function() {
  //     r.table("activity")
  //     .insert({
  //       hacking: true,
  //       time: new Date,
  //     })
  //     .run(socket.req._rdbConn, (err, res) => {
  //       if(err) throw new Error(err)
  //     })

  //     // io.emit('hacking', { id: req.user.id, username: req.user.username });
  //   });

  //   socket.on('not hacking', function() {
  //     r.table("activity")
  //     .insert({
  //       hacking: false,
  //       time: new Date,
  //     })
  //     .run(req._rdbConn, (err, res) => {
  //       if(err) throw new Error(err)
  //     })

  //     // io.emit('not hacking', { id: req.user.id, username: req.user.username });
  //   });

  });

  // r.connect(config.rethinkdb, function(error, conn) {
  //   if (error) {
  //     throw new Error(error)
  //   } else {
  //   }
  // });
}

/*
 * Connect to rethinkdb, create the needed tables/indexes and then start express.
 * Create tables/indexes then start express
 */
async.waterfall([
  function connect(callback) {
    r.connect(config.rethinkdb, callback);
  },
  function createDatabase(connection, callback) {
    //Create the database if needed.
    r.dbList().contains(config.rethinkdb.db).do(function(containsDb) {
      return r.branch(
        containsDb,
        {created: 0},
        r.dbCreate(config.rethinkdb.db)
      );
    }).run(connection, function(err) {
      callback(err, connection);
    });
  }
], function(err, connection) {
  if(err) {
    console.error(err);
    process.exit(1);
    return;
  }

  createTables();
});

function mapTables(table, callback) {
  async.waterfall([
    function connect(callback) {
      r.connect(config.rethinkdb, callback);
    },
    function createTable(connection, callback) {
      //Create the table if needed.
      r.tableList().contains(table).do(function(containsTable) {
        return r.branch(
          containsTable,
          {created: 0},
          r.tableCreate(table)
        );
      }).run(connection, function(err) {
        callback(err, connection);
      });
    },
    function createIndex(connection, callback) {
      //Create the index if needed.
      r.table(table).indexList().contains('createdAt').do(function(hasIndex) {
        return r.branch(
          hasIndex,
          {created: 0},
          r.table(table).indexCreate('createdAt')
        );
      }).run(connection, function(err) {
        callback(err, connection);
      });
    },
    function waitForIndex(connection, callback) {
      //Wait for the index to be ready.
      r.table(table).indexWait('createdAt').run(connection, function(err, result) {
        callback(err, connection);
      });
    }
  ], function(err, connection) {
    if (err) {
      callback(err, null)
    } else {
      callback(null, connection)
    }

  })
}

function createTables() {
  async.map(config.rethinkdb.tables, mapTables, function(err, connection) {
    if(err) {
      console.error(err);
      process.exit(1);
      return;
    }

    startExpress(connection);
  })
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + server.address().address);
}
